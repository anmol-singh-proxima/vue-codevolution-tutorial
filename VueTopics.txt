VSCode Extensions:
- Vue VSCode Snippets


1. Binding
- binding happens using v-bind directive
- there are few ways we can bind the data or style to html element:
    - text - v-bind:text
    - html - v-bind:html
    - attributes: class, style - v-bind:class, v-bind:style


2. Conditional Rendering
- v-if
- v-if-else
- v-if-else-if
- v-else


3. List Rendering
- v-for - Normal List Conditional
- v-for with v-if - Conditional List Rendering


4. Event Handling
- v-on:{event} or @{event}


5. Form Handling
- v-model - for form element data-binding
- v-on:submit - to submit the form


6. Modifiers
- Extra addons in the vue-directives
- These modifiers can be chained one-after-other
- v-model.trim - to trim a form field like input or textarea 
- v-model.number - to treat a input[type="number"] as a number
- v-model.lazy - to prevent change with every keystroke in input field, helpful in input validation only after the input is filled completely
- v-on:submit.prevent - do the work of event.preventDefault()
- v-on:keyup:enter - to submit the form on Enter key on an input


7. Bonus directives
- v-once - it will render the element(which is using this directive) only once, at re-render it won't change
- v-pre - it won't compile the element(which is using this directive), it will render it as it is as a HTML string


8. Computed property
- It computes a peroperty based on the existing data as the computed property.
- It is better than writing the computed code (as javascript expression) directly in template since it might needs to get displayed in several places in the template.
- It is better than a method/function because whenever you want to re-render the computed property you don't need to call the computed property like a function since it stores the value as cache which gets changed only when the dependencies gets changed which improves the overall performance.
- Use Computed Properties when:
    - You need to compose new data from existing data
    - You need to reduce the length of the variable by getting someDeeplyNestedProperty of an object


9. Watchers
- It watches the changes in a property given as key
- It automatically provides new-value and old-value as arguments to the function of property
- Use Watchers when:
    - You have to check if a property has changed to a favourable value to know if you are ready to perform an action
    - You have to call an API in response to change in application data
    - You have to apply transitions
- There are 2 properties of watchers:
    - immediate - when the watcher handlers needs to execute immediately at the time of component rendering, this property sets to true
    - deep - when you need to check for the changes for the nested values of objects and array, this property sets to true


10. Components and props
- Component is a basic building block of Front-end design
- It makes the code simpler by increasing reusability and readability
- A component (parent component) can call another another component as child component to use the child component in its template
- Prop Attributes:
    - Parent component can pass data to child component as attributes
    - These attributes can be used in child component as props by registering in props object
    - A single prop in child component can have 3 different properties:
        - type: [Number, String, Boolean, Object, Array, Function]
        - required: [true, false]
        - default: [Some default value in-case prop is not passed]
- Non-prop Attributes:
    - There are some non-prop attributes like id, class, style passed to child component
    - These non-prop attributes are applied on root node of child component by default
    - To avoid by-default behaviour, we can:
        - set 'inheritAttrs' property in child component to false
            export default {
                name: '', ...
                inheritAttrs: false,
            }
        - and, provide binding to the required element (instead of root node) by using $attrs
            <div> //root node
                <h2 v:bind="$attrs>...</h2> //required node
            </div>


11. Provide and Inject
- These are 2 APIs provided by vue to pass the data through the component tree without having to pass the data manually as props through each component
- In root component, add a 'provide' property/function and pass/return the neccessary data as object
    export default {
        name: 'AppComponent',
        ...
        provide: {  // 'provide' property
            data: 'some data',
        }
        provide() {  // 'provide' function
            return {
                data: 'some data',
            }
        }
    }
- In nested down child component, add a property called 'inject', and simply add the 'data' property passed from 'provide' API and use it in child component as a normal data-property
    export default {
        name: 'NestedChildComponent',
        ...
        inject: ['data']
    }


12. Custom Component Event
- It helps the child component to communicate with the parent component with the help of events emitted from child component
- In child component, to emit an event to parent component, you have to write the event in 'emits' property and use $emit('[event_name]') on button click
    <template>
        ...
        <button @click="$emit('an_event')">Emit Event</button>
        ...
    </template>
    export default {
        name: 'ChildComponent', ...
        emits: ['an_event']
    }
- You can also pass data along with the event name i.e. you can write $emit('an_event', data) in template
- You can do the validation of these events in the same way as props
    export default {
        name: 'ChildComponent', ...
        emits: {
            an_event(data) {
                if validation is successful
                    return true
                else
                    return false 
            }
        }
    }
- Sometimes you need to create Custom Form input Component, that time need to manage the value of v-model attribute


13. Slots
- When the communication is happened between components, the data(props) is handled by the ParentComponent and the html content(template) is handled by the ChildComponent, thus creates a strong bind between them, and ParentComponent has no control over the template of ChildComponent
- Slots are a way of passing the data to ChildComponent, both the props and the html content thus making the ParentComponent in control of the ChildComponent
- Slot Props
    - To pass data from ChildComponent to ParentComponent, slot-props is used
    - It simply pass the data as props in <slot :prop="[value]"> in ChildComponent which is accessed in <template v-slot:default="slotProps"> in ParentComponent
    - This way, ParentComponent can define how to data will get displayed


14. Component Styles
- By Default, a component styles are applied globally in the component tree
- Scoped attribute ensures a component's CSS will apply only to its own HTML elements; but even with the scoped attribute, the CSS of ParentComponent gets applied to ChildComponent root element.
- When using Slots, the ParentComponent styles are applied and not the ChildComponent styles even though the element is embedded inside the ChildComponent


15. Dynamic Component
- Suppose there are 5-10 tabs in a menu, and based on the tab clicked the corresponding component needs to be rendered.
- Vue provided a way to render the component dynamically based on the tab clicked
    <component :is="[ActiveComponentName]" />
- Based on a certain condition we can change the 'ActiveComponentName' by using some logic
- keep-alive
    - You can keep the dynamic component alive by adding an html element
        <keep-alive>
            <component :is="[ActiveComponentName]" />
        </keep-alive>
    - Use it when:
        - you want to maintain the data in the components
        - you does not want to re-render the components
 

 16. Teleport Component
 - These component are on the different node on the html other than the default '#app' node
 - You need teleport component when you want to render something other than the normal flow of component like a Modal, Tool-tip, Alert, etc.
 - To acheive this, you need to add the <teleport> html element around the component which you want to render other than the normal flow of components and provide the HTML DOM element in 'to' attribute
    <teleport to="#portal-root">
        <Modal></Modal>
    </teleport>


17. Lifecycle Hooks
- There are 4 phases in the Vue Component, and there are 13 lifecyle hooks related to the Vue Components
- The Phases are:
    - Creation - beforeCreate(), created()
    - Mounting - beforeMount(). mounted()
    - Updation - beforeUpdate(). updated()
    - Unmounting - beforeUnmount(), unmounted()
- The 5 other lifecycle hooks are:
    - activated(), deactivated() - These are triggered when the components are being activated and/or deactivated in keep-alive functionality
    - errorCaptured() - This is triggered when an error is captured in any descendant component
    - renderTracked(), renderTriggered() - These are triggered when a component is rendered on UI


18. Template Ref
- It is a method of accessing the DOM elements directly in Vue
- It is done by using 'ref' attribute on any HTML element and provide a value to it, then access the value of 'ref' attribute in 'this.$refs' object of Vue Component and perform the neccessary actions on that HTML element


19. Mixins
- Whenever more than one components use the same functionality than we can write these functionality in a different javascript file, and import it in them and add them in component's 'mixins' property to use them in component
- These functionality can be data(), methods{}, hooks(), computed values, etc.
- If the component has the same property as it is in 'mixins' then the component property will get preferrence.


20. Composition API
- Composition API is just another way to write a Vue Component, especially script block.
- The earlier method was called as Options API where there the component was built-up using many different Options such as data, methods, props, mixins, lifecycle-hooks.
- In Options API, the features are divided in different options whereas in Composition API, the features are encapsulated so that they can be used in different components through out the application.
- Why Composition API?
    - Vue projects became hard to manage as they grew in size and complexity
    - Re-using logic across components became difficult


21. Composition API changes
- setup(){} is the entry point of the Composition API - everthing is written inside setup(){}
- ref() and reactive() instead of data(){} for data handling
- toRefs() for easier binding of data in template
- methods is replaced by function() in setup(){}
- v-model acts as same as in Options API
- computed{} option is replaced with compute() funciton which accepts a function to perform the operation and returns a value which can be saved in a variable


22. Watchers in Composition API
- watch{} option is replaced with watch() function
- It takes 2 arguments
    - 1st - variables to watch
    - 2nd - function to execute with 2 arguments - newValue and oldValue
- If the function to execute for watching variables is same then it can take an array of those variables with the same function with an array of newValues and oldValues
- To excute the function at loading, it takes 3rd argument as object with property 'immediate' as true
- It works different for data created with both ref and reactive
- Watchers can work on ref values, reactive values and array of values
- To watch any other data property, we need a getter function as the first argument
    () => { return '[value-to-watch]' }
- For Deep watch
    - import _ from lodash
    - Add the cloneDeep() in watcher getter function (in place of variable)
        () => _.cloneDeep('[property-to-watch]')


23. Lifecycle Hooks in Composition API
- The names of the hooks has been changed
    - beforeCreate() & created() are replaced by setup()
    - mounted(), updated() & unmounted() are replaced by onMounted(), onUpdated() & onUnmounted() respectively
- The hooks are to be imported in the export_default{} in Composition API whereas the hooks were already existing in the export_default{} in Options API
- The hooks are executed by passing a function as an argument to them


24. Template Ref
- The <template> is same as the Options API
- In the script block, the reference-value should be created using ref() and return it from the setup()


25. Props
- In Composition API, the props is passed from the ParentComponent in the same fashion as in Options API
- But in the ChildComponent, its can be accessed as the first argument of setup(){} method 